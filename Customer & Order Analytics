#In this SQL, I'm querying a database with multiple tables in it to quantify statistics about customer and order data. 

#1. How many orders were placed in January? 
SELECT COUNT(orderID)
FROM BIT_DB.JanSales
WHERE length(orderID) = 6 
AND orderid <> 'Order ID';

#2. How many of those orders were for an iPhone? 
SELECT COUNT(orderID)
FROM BIT_DB.JanSales
WHERE Product='iPhone'
AND length(orderID) = 6 
AND orderID <> 'Order ID';

#3. Select the customer account numbers for all the orders that were placed in February. 
SELECT distinct acctnum
FROM BIT_DB.customers cust
JOIN BIT_DB.FebSales Feb
ON cust.order_id=Feb.orderID
WHERE length(orderID) = 6 
AND orderID <> 'Order ID';

#4. Which product was the cheapest one sold in January, and what was the price? 
SELECT distinct Product, price
FROM BIT_DB.JanSales
WHERE  price in (SELECT min(price) FROM BIT_DB.JanSales);

#5. What is the total revenue for each product sold in January?
SELECT sum(Quantity)*price AS revenue, Product
FROM BIT_DB.JanSales
GROUP BY Product;

#6. Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, how many of each were sold, and what was the total revenue?
SELECT 
sum(Quantity), product, 
sum(Quantity)*price AS revenue
FROM BIT_DB.FebSales 
WHERE location = '548 Lincoln St, Seattle, WA 98101'
GROUP BY Product;

#7. How many customers ordered more than 2 products at a time, and what was the average amount spent for those customers?
SELECT count(distinct cust.acctnum), avg(quantity*price)
FROM BIT_DB.FebSales Feb
JOIN BIT_DB.customers cust
ON FEB.orderID=cust.order_id
WHERE Feb.Quantity>2
AND length(orderID) = 6 
AND orderID <> 'Order ID'

#8. List all order dates between 13 and 18 February 2019.
SELECT orderdate FROM BIT_DB.FebSales
WHERE orderdate BETWEEN '02/13/19 00:00' AND '02/18/19 00:00';

#9. List the locations of all orders place on 18 February 2019.
SELECT location FROM BIT_DB.FebSales
WHERE orderdate = '02/18/19 01:35';

#10. What is the total amount of items sold on 18 February 2019?
SELECT sum(quantity) FROM BIT_DB.FebSales
WHERE orderdate like '02/18/19%';

#11. What varieties of batteries does the store sell?
SELECT DISTINCT Product FROM BIT_DB.FebSales
WHERE Product LIKE '%Batteries%';

#12. What products have a price ending in .99?
SELECT DISTINCT Product, Price FROM BIT_DB.FebSales
WHERE Price LIKE '%.99';

#13. List all the products sold in Los Angeles in February, and include how many of each were sold.
SELECT Product, sum(quantity) FROM BIT_DB.FebSales
WHERE location LIKE '%Los Angeles%'
GROUP BY Product;

#14. Which locations in New York received at least 3 orders in January, and how many orders did they each receive?
SELECT DISTINCT location, count(orderID) FROM BIT_DB.JanSales
WHERE location LIKE '%New York%'
AND length(orderid) = 6 
AND orderid <> 'Order ID'
GROUP BY location
HAVING count(orderID)>2;

#15. How many of each type of headphone were sold in February?
SELECT DISTINCT Product, count(orderID) FROM BIT_DB.FebSales
WHERE Product LIKE '%headphones%'
GROUP BY Product;

#16. What was the average amount spent per account in February?
SELECT sum(quantity*price)/count(cust.acctnum) FROM BIT_DB.FebSales Feb
LEFT JOIN BIT_DB.customers cust
ON feb.orderID=cust.order_id
WHERE length(orderid) = 6
AND orderid <> 'Order ID';

#17. What was the average quantity of products purchased per account in February?
SELECT sum(quantity)/count(cust.acctnum) FROM BIT_DB.FebSales Feb
LEFT JOIN BIT_DB.customers cust
ON feb.orderID=cust.order_id
WHERE length(orderid) = 6
AND orderid <> 'Order ID';

#18. Which product brought in the most revenue in January and how much revenue did it bring in total?
SELECT product, 
sum(quantity*price)
FROM BIT_DB.JanSales 
GROUP BY product
ORDER BY sum(quantity*price) desc 
LIMIT 1;
